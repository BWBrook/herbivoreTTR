┌─────────────────────────────────────┬──────────────────────────────────────────┬───────────────────────────────────────────────┬───────────┬───────────────────────────────────────────────────────────────────────────────────────┐
│ Pseudo-code Step                    │ C++ Counterpart (High-Level)             │ R Function(s) / Script(s)                     │ Status    │ Potential Future Extensions                                                           │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 1. init_conditions                  │ init_conditions() in init_aDGVM.cpp      │ conditions.R → init_conditions()              │ Complete  │ - Seasonal or multi-year climate variability                                          │
│                                     │ (Sets up daily climate & env)            │                                               │           │ - Additional climate variables (rain, humidity)                                       │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 2. init_plants                      │ init_plants() in init_aDGVM.cpp          │ plants.R → init_plants()                      │ Complete  │ - Advanced phenology or reproduction modules                                          │
│                                     │ (Grid arrangement & initial biomass)     │                                               │           │ - Distinguish tree vs. grass more explicitly                                          │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 3. init_herbivore                   │ init_herbivore() in init_aDGVM.cpp       │ herbivore.R → init_herbivore()                │ Complete  │ - Population-level initialization (multiple herbivores with random mass, etc.)        │
│                                     │ (Sets herbivore mass/type & base state)  │                                               │           │ - Stochastic distributions of body condition, mass, or type                           │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 4. daily loop scaffolding           │ main.cpp daily loop                      │ main.R → simulate_day() (planned)             │ Mostly    │ - Final integrated “simulate_day()” function that calls all daily steps in order.     │
│                                     │ (Iterates day by day, calling subfuncs)  │                                               │ Complete? │ - Hook in multi-day or multi-year loops, spinning up, etc.                            │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 5. reset_daily_variables            │ No direct C++ function name, but done    │ herbivore.R → reset_daily_variables()         │ Complete  │ - Could integrate individual-level variation if new traits get added                  │
│                                     │ in main.cpp loop pre-check each day      │                                               │           │ - Tie in advanced “morning” logic if needed                                           │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 6. calculate_foraging_traits        │ In various “calc_cost_…” or “init…”      │ herbivore_calculations.R →                    │ Complete  │ - Could add alternate scaling relationships based on species differences              │
│                                     │ calls in C++ (bite size, velocity, etc.) │ calculate_foraging_traits()                   │           │ - Possibly integrate dynamic mass changes (growth)                                    │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 7. hourly_digestion_step            │ digest_and_excrete() + incorporate_energy in daily_per_plot.cpp │ herbivore_calculations.R Complete  │ - More sophisticated multi-compartment digestion or different rates for leaf/stem/def │
│                                     │ (Shifts gut content, inc. energy)        │                      → hourly_digestion_step()│           │ - Additional by-products (nitrogen recycling, excretion to soil)                      │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 8. update_gut_content               │ Part of digest_and_excrete()             │ herbivore_calculations.R →                    │ Complete  │ - Explore separate compartments for e.g. rumen vs. hindgut if model requires          │
│                                     │ (Sums up gut biomass)                    │ update_gut_content()                          │           │                                                                                       │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 9. make_foraging_decision           │ daily_per_plot.cpp “if (herbivore.behaviour…)” logic  │ herbivore_behaviour.R →          │ Complete  │ - Expand nutritional heuristics: protein vs. water vs. specific nutrient needs        │
│                                     │ (Decide if keep eating vs. move, etc.)   │       make_foraging_decision()                │           │ - Integrate dynamic risk factors (predation, etc.)                                    │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 10. herbivore_eat                   │ daily_per_plot.cpp “eat()” logic         │ herbivore_behaviour.R → herbivore_eat()       │ Complete  │ - Possibly refine calculation of leaf vs. stem or defense consumption rates           │
│                                     │ (Removes plant biomass, updates gut)     │                                               │           │ - Integrate partial bite, energy or time constraints per minute/h.                    │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 11. herbivore_move                  │ daily_per_plot.cpp “herbivore_move()”    │ herbivore_behaviour.R → herbivore_move()      │ Complete  │ - Possibly incorporate different movement speeds for day/night, random walk, etc.     │
│                                     │ (Moves herbivore toward plant)           │                                               │           │ - Integrate cost of movement on terrain or slope                                      │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 12. select_new_plant                │ daily_per_plot.cpp “pick_a_plant()”      │ herbivore_behaviour.R → select_new_plant()    │ Complete  │ - Expand tastiness function for more nuanced defensive or chemical traits             │
│                                     │ (Probabilistic plant choice)             │                                               │           │ - Incorporate prior knowledge/memory, social factors in plant selection               │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 13. check_daily_water_balance       │ daily_per_plot.cpp “if water needed…”    │ herbivore_calculations.R →                    │ Complete  │ - Possibly add partial search for water, or different distances for multiple sources  │
│                                     │ (Ensures daily water intake is met)      │ check_daily_water_balance()                   │           │ - Detailed energy cost for water fetches, or dynamic water holes.                     │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 14. calc_daily_energy_balance  │ daily_per_plot.cpp “energy_balance +=..”      │ herbivore_calculations.R →                    │ Complete  │ - Incorporate thermoregulation costs or additional day/night metabolic changes        │
│                                     │ (Maintenance & locomotion cost vs. intake│ calc_daily_energy_balance()                   │           │ - Add scaling for environment (temperature extremes)                                  │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 15. Additional TTR plant updates    │ daily_per_plant.cpp “transport_resistance|                                               │ Complete  │ - Thornley model or any alternative for plant growth & resource flows.                │
│                                     │ (Simulate daily plant physiology)        │                                               │           │ - This is the major missing piece if we want dynamic plant regrowth or TTR coupling   │
├─────────────────────────────────────┼──────────────────────────────────────────┼───────────────────────────────────────────────┼───────────┼───────────────────────────────────────────────────────────────────────────────────────┤
│ 16. Additional modules (pop growth, | Partly sketched in C++ but not           | No direct R code yet                          | Future    │ - This can be integrated once the baseline model is stable                            │
│     survival, excretion to soil, advanced N cycling)  fully implemented (TODOs)│                                               │           │ - E.g. advanced population module, mortality rates, etc.                              │
└─────────────────────────────────────┴──────────────────────────────────────────┴───────────────────────────────────────────────┴───────────┴───────────────────────────────────────────────────────────────────────────────────────┘
